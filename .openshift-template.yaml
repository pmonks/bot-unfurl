apiVersion: v1
kind: Template
metadata:
  name: botunfurl-build-template
parameters:
- name: BOT_NAME
  description: The Bot name
  displayName: Bot Name
  required: true
  value: "botunfurl"
- name: S2I_STREAM_TAG
  description: The S2I ImageStreamTag
  displayName: S2I ImageStreamTag
  required: true
  value: "s2i-java-binary:latest"
- name: RUN_COMMAND
  description: The command to run when the container starts
  displayName: Run Command
  required: true
  value: "java -cp /opt/openshift/bot-unfurl-standalone.jar bot_unfurl.main"
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${BOT_NAME}
    name: ${BOT_NAME}
  spec: {}
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: ${BOT_NAME}
    labels:
      app: ${BOT_NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${BOT_NAME}:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: Binary
      binary:
    strategy:
      type: Source
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: ${S2I_STREAM_TAG}
    triggers: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${BOT_NAME}
    name: ${BOT_NAME}
  spec:
    replicas: 1
    selector:
      app: ${BOT_NAME}
      deploymentconfig: ${BOT_NAME}
    strategy:
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: ${BOT_NAME}
          deploymentconfig: ${BOT_NAME}
      spec:
        containers:
        - image: ${BOT_NAME}:latest
          imagePullPolicy: Always
          name: ${BOT_NAME}
          ports:
          - containerPort: 4567
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          env:
          - name: RUN_COMMAND
            value: ${RUN_COMMAND}
          - name: LOG4J_FILE
            value: ${LOG4J_FILE}
          - name: SESSIONAUTH_URL
            value: https://foundation-dev-api.symphony.com/sessionauth
          - name: KEYAUTH_URL
            value: https://foundation-dev-api.symphony.com/keyauth
          - name: POD_URL
            value: https://foundation-dev.symphony.com/pod
          - name: AGENT_URL
            value: https://foundation-dev.symphony.com/agent
          - name: DOWNLOAD_HOST
            valueFrom:
              secretKeyRef:
                name: symphony.foundation
                key: download.host
          - name: DOWNLOAD_PATH
            valueFrom:
              secretKeyRef:
                name: ${BOT_NAME}.certs
                key: certs.download.path
          - name: DOWNLOAD_ITEMS
            valueFrom:
              secretKeyRef:
                name: ${BOT_NAME}.certs
                key: certs.download.items
          - name: TRUSTSTORE_FILE
            valueFrom:
              secretKeyRef:
                name: ${BOT_NAME}.certs
                key: truststore.file
          - name: TRUSTSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${BOT_NAME}.certs
                key: truststore.password
          - name: BOT_USER_EMAIL
            valueFrom:
              secretKeyRef:
                name: ${BOT_NAME}.certs
                key: bot.user.email
          - name: BOT_USER_CERT_FILE
            valueFrom:
              secretKeyRef:
                name: ${BOT_NAME}.certs
                key: bot.user.cert.file
          - name: BOT_USER_CERT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${BOT_NAME}.certs
                key: bot.user.cert.password
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${BOT_NAME}
        from:
          kind: ImageStreamTag
          name: ${BOT_NAME}:latest
      type: ImageChange
  status: {}
